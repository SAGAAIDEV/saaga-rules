---
description: 
globs: *tools/**.py
alwaysApply: false
---
Guidelines for Creating MCP Tools
Function Signature:
Use async for all MCP tools
Include proper type hints for parameters and return value
Return appropriate values (MCPResponse or meaningful data)
Documentation:
Write comprehensive docstrings with description, args, and returns
Document each parameter's purpose and expected format
Logging:
Import and use the standard logger from src.base.logging
Log tool start, important parameters, and completion
Add descriptive logs for major steps and outcomes
Error Handling:
Use try/except blocks to catch and properly handle errors
Log exceptions with appropriate severity levels
Return meaningful error responses rather than crashing
Code Structure:
Organize core logic in clear, sequential steps
Consider breaking complex operations into helper functions
Handle resource cleanup properly
Parameters:
Validate input parameters before processing
Use appropriate data types (Path objects for file paths)
Include flags like force for better control
Performance:
Implement parallelism for CPU-intensive operations
Consider resource usage for memory-intensive tasks
Use async patterns appropriately
Integration:
Ensure compatibility with the MCP tool framework
Follow consistent naming conventions
Test tool integration in the MCP ecosystem