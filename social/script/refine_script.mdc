---
description: 
globs: 
alwaysApply: false
---
# Workflow: Using get_date and refine_script Together

This rule describes a common workflow involving two MCP tools from different servers:
1.  `get_date` from the `base` MCP server.
2.  `refine_script` from the `analyzer` MCP server (defined in [`src/analyzer/tools/critique_script.py`](mdc:src/analyzer/tools/critique_script.py)).

## Workflow Overview

A typical use case is to process the most recent video capture. This involves:
1.  Determining the path to the latest capture directory, which often incorporates the current date.
2.  Invoking the `refine_script` tool with this capture directory path to refine its script content.

## Step 1: Determine Capture Directory using `get_date`

*   **Tool**: `get_date`
*   **Server**: `base`
*   **Functionality**: Returns a date string. To get the current date (often needed for the latest capture directory), `days_offset` would be `0` or omitted.
*   **Example Invocation (Conceptual)**:
    ```json
    {
      "server": "base",
      "tool": "get_date",
      "kwargs": {"days_offset": 0}
    }
    ```
*   **Usage**: The date returned (e.g., `YYYY-MM-DD`) is used to construct the path to the relevant capture directory. For example, if captures are stored in `/captures/YYYY-MM-DD/VERSION`, this date helps identify the target daily folder.
    *   The script [`scripts/capture.sh`](mdc:scripts/capture.sh) demonstrates forming a path like `$HOME/saga/videos/captures/$TODAY` where `$TODAY` is derived from `date +%Y-%m-%d` (similar to `get_date` with offset 0).
    *   The logic in [`src/mcp_llm_video_editor/lib/path_utils.py`](mdc:src/mcp_llm_video_editor/lib/path_utils.py) (specifically the `capture_directory` function) also shows how a date is used to find the latest or a new version directory.

## Step 2:
ls the directory to list the versions
captures/YYYY-MM-DD/
if not specified what version, assume the latest version.

## Step 3: Refine Script using `refine_script`

*   **Tool**: `refine_script`
*   **Server**: `analyzer`
*   **Functionality**: Takes a `capture_directory` (determined in Step 1), reads its `edits.json`, refines the script content, and saves it as `script.json` within that same directory.
*   **Invocation Parameter**:
    *   `capture_directory` (string, required): The full path to the capture directory (e.g., `/Users/andrew/saga/videos/captures/2023-10-27/1`).
*   **Example Invocation (Conceptual)**:
    ```json
    {
      "server": "analyzer",
      "tool": "refine_script",
      "kwargs": {
        "capture_directory": "/path/to/latest/captures/YYYY-MM-DD/N" 
      }
    }
    ```
*   **Key Input**: `{capture_directory}/edits.json` (see [`captures/2025-05-07/1/edits.json`](mdc:captures/2025-05-07/1/edits.json) for example structure).
*   **Key Output**: `{capture_directory}/script.json` (structured as per [`src/analyzer/lib/refine_script/structured_output.py`](mdc:src/analyzer/lib/refine_script/structured_output.py)).

## CLI Integration

The `VideoEditorCLI` in [`src/mcp_llm_video_editor/cli.py`](mdc:src/mcp_llm_video_editor/cli.py) automates this:
*   When `refine_script` is called without `--capture-directory`, the CLI internally uses `get_capture_directory` (which effectively uses the current date, similar to `get_date`) to find the latest directory and then calls the `refine_script` tool.

```bash
python -m src.mcp_llm_video_editor.cli refine_script 
# This will use get_date implicitly via get_capture_directory to find the latest capture
```

This workflow ensures that script refinement operations can easily target the most recent work by first determining the correct dated directory.

